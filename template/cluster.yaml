---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'App cluster infrastructure formation'
  Parameters:
    AppVPC:
      Type: AWS::EC2::VPC::Id
    Subnet1:
      Type: AWS::EC2::Subnet::Id 
      Description: Must be a public subnet in the specified VPC
    Subnet2:
      Type: AWS::EC2::Subnet::Id 
      Description: Must be a public subnet in the specified VPC
    DbClientSecurity:
      Type: AWS::EC2::SecurityGroup::Id
      Description: Security group allowed to access the db
    InstanceType:
      Type: String
      Default: t2.micro
      AllowedValues:
        - t2.micro
      ConstraintDescription: must be a valid EC2 instance type.
    DesiredCapacity:
      Description: The desired ASG capacity
      Type: Number
      Default: 1
      MinValue: 1
    InstanceAMI:
      Description: Managed AMI ID for EC2 Instance. Must be ECS optimized
      Type : String
      Default: ami-097e3d1cdb541f43e
    KeyName:
      Description: The EC2 Key Pair to allow SSH access to the instances
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    SSHLocation:
      Description: The IP address range that can be used to SSH to the EC2 instances
      Type: String
      MinLength: 9
      MaxLength: 18
      Default: 0.0.0.0/0
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Resources:
    AppEC2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ec2.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: app-service-policy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'ecs:CreateCluster'
                    - 'ecs:DeregisterContainerInstance'
                    - 'ecs:DiscoverPollEndpoint'
                    - 'ecs:Poll'
                    - 'ecs:RegisterContainerInstance'
                    - 'ecs:StartTelemetrySession'
                    - 'ecs:Submit*'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'ecr:GetAuthorizationToken'
                    - 'ecr:BatchGetImage'
                    - 'ecr:GetDownloadUrlForLayer'
                  Resource: '*'
    AppEC2Profile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Path: /
        Roles: [!Ref AppEC2Role]
    AppALBSecurity:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Public Access to AppALB
        VpcId: !Ref AppVPC
        SecurityGroupIngress:
          - IpProtocol: tcp 
            CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
          - IpProtocol: tcp 
            CidrIp: 0.0.0.0/0
            FromPort: 3000
            ToPort: 3000
    AppInstanceSecurity:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access and HTTP from the load balancer only
        VpcId: !Ref AppVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref SSHLocation
          - IpProtocol: -1
            SourceSecurityGroupId: !Ref AppALBSecurity
    AppALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        IpAddressType: ipv4
        Scheme: internet-facing
        SecurityGroups:
          - !Ref AppALBSecurity
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2
    AppCluster:
      Type: AWS::ECS::Cluster
    AppInstanceLC:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: !Ref InstanceAMI
        InstanceType: !Ref InstanceType
        IamInstanceProfile: !Ref AppEC2Profile
        SecurityGroups:
          - !Ref AppInstanceSecurity
          - !Ref DbClientSecurity
        KeyName: !Ref KeyName
        AssociatePublicIpAddress: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${AppCluster} >> /etc/ecs/ecs.config
    AppInstanceASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchConfigurationName: !Ref AppInstanceLC
        MinSize: 1
        MaxSize: !Ref DesiredCapacity
        DesiredCapacity: !Ref DesiredCapacity
        VPCZoneIdentifier:
          - !Ref Subnet1
          - !Ref Subnet2
  Outputs:
    DNSName:
      Value: !GetAtt AppALB.DNSName
    ClusterName:
      Value: !Ref AppCluster
      Export:
        Name: !Sub ${AWS::StackName}:ClusterName
    ClusterVPC:
      Value: !Ref AppVPC
      Export:
        Name: !Sub ${AWS::StackName}:VpcId
    ALBArn:
      Value: !Ref AppALB
      Export:
        Name: !Sub ${AWS::StackName}:ALBArn