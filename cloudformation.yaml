---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'Accountant microservice infrastructure formation'
  Parameters:
    DbUrl:
      Type: String
    DbUser:
      Type: String
    DbPassword:
      Type: String
      NoEcho: true
    JwtSecret:
      Type: String
      NoEcho: true
    AccountantVPC:
      Type: AWS::EC2::VPC::Id
    Subnet1:
      Type: AWS::EC2::Subnet::Id 
      Description: Must be a public subnet in the specified VPC
    Subnet2:
      Type: AWS::EC2::Subnet::Id 
      Description: Must be a public subnet in the specified VPC
    DbClientSecurity:
      Type: AWS::EC2::SecurityGroup::Id
      Description: Security group allowed to access the db
    InstanceType:
      Type: String
      Default: t2.micro
      AllowedValues:
        - t2.micro
      ConstraintDescription: must be a valid EC2 instance type.
    InstanceAMI:
      Description: Managed AMI ID for EC2 Instance. Must be ECS optimized
      Type : String
    KeyName:
      Description: The EC2 Key Pair to allow SSH access to the instances
      Type: AWS::EC2::KeyPair::KeyName
      ConstraintDescription: must be the name of an existing EC2 KeyPair.
    SSHLocation:
      Description: The IP address range that can be used to SSH to the EC2 instances
      Type: String
      MinLength: 9
      MaxLength: 18
      Default: 0.0.0.0/0
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Resources:
    AccountantEC2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ec2.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: accountant-service-policy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'ecs:CreateCluster'
                    - 'ecs:DeregisterContainerInstance'
                    - 'ecs:DiscoverPollEndpoint'
                    - 'ecs:Poll'
                    - 'ecs:RegisterContainerInstance'
                    - 'ecs:StartTelemetrySession'
                    - 'ecs:Submit*'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                    - 'ecr:GetAuthorizationToken'
                    - 'ecr:BatchGetImage'
                    - 'ecr:GetDownloadUrlForLayer'
                  Resource: '*'
    AccountantEC2Profile:
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Path: /
        Roles: [!Ref AccountantEC2Role]
    AccountantALBSecurity:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Public Access to AccountantALB
        VpcId: !Ref AccountantVPC
        SecurityGroupIngress:
          - IpProtocol: tcp 
            CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
    AccountantInstanceSecurity:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access and HTTP from the load balancer only
        VpcId: !Ref AccountantVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref SSHLocation
          - IpProtocol: -1
            SourceSecurityGroupId: !Ref AccountantALBSecurity
    AccountantALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        IpAddressType: ipv4
        Scheme: internet-facing
        SecurityGroups:
          - !Ref AccountantALBSecurity
        Subnets:
          - !Ref Subnet1
          - !Ref Subnet2
    AccountantTG:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /api/health
        HealthCheckPort: traffic-port
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 5
        Port: 8080
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        TargetType: instance
        VpcId: !Ref AccountantVPC
    AccountantALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - TargetGroupArn: !Ref AccountantTG
            Type: forward
        LoadBalancerArn: !Ref AccountantALB
    AccountantCluster:
      Type: AWS::ECS::Cluster
    AccountantTD:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: accountant-td
        NetworkMode: bridge
        ContainerDefinitions:
            - Name: accountant-container
              Memory: 512
              Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/accountant:latest'
              PortMappings:
                - HostPort: 0
                  ContainerPort: 8080
                  Protocol: tcp
              Environment:
                - Name: GCIT_DB_URL
                  Value: !Ref DbUrl
                - Name: GCIT_DB_USER
                  Value: !Ref DbUser
                - Name: GCIT_DB_PASSWORD
                  Value: !Ref DbPassword
                - Name: GCIT_JWT_SECRET
                  Value: !Ref JwtSecret
    AccountantInstanceLC:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: !Ref InstanceAMI
        InstanceType: !Ref InstanceType
        IamInstanceProfile: !Ref AccountantEC2Profile
        SecurityGroups:
          - !Ref AccountantInstanceSecurity
          - !Ref DbClientSecurity
        KeyName: !Ref KeyName
        AssociatePublicIpAddress: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${AccountantCluster} >> /etc/ecs/ecs.config
    AccountantInstanceASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchConfigurationName: !Ref AccountantInstanceLC
        MinSize: 1
        MaxSize: 1
        VPCZoneIdentifier:
          - !Ref Subnet1
          - !Ref Subnet2
    AccountantService:
      Type: AWS::ECS::Service
      DependsOn: 
        - AccountantALBListener
        - AccountantInstanceASG
      Properties:
        ServiceName: accountant-service
        Cluster: !Ref AccountantCluster
        DeploymentConfiguration:
          MinimumHealthyPercent: 0
          MaximumPercent: 100
        DesiredCount: 1
        TaskDefinition: !Ref AccountantTD
        LoadBalancers:
          - ContainerName: accountant-container
            ContainerPort: 8080
            TargetGroupArn: !Ref AccountantTG
  Outputs:
    URL:
      Value: !Sub http://${AccountantALB.DNSName}
  